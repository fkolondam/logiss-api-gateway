{
  "version": 3,
  "sources": ["netlify/functions/utils/gas.js", "netlify/functions/utils/auth.js", "netlify/functions/utils/response.js", "netlify/functions/api.js"],
  "sourceRoot": "C:/Users/HP/AppData/Local/Temp/tmp-81192-2pqKXpNFjtWU",
  "sourcesContent": ["const fetch = require('node-fetch')\r\n\r\nconst GAS_URL = process.env.GAS_URL\r\nconst GAS_API_KEY = process.env.GAS_API_KEY\r\n\r\nasync function fetchGas(action, data = null) {\r\n  try {\r\n    const url = new URL(GAS_URL)\r\n    const options = {\r\n      method: data ? 'POST' : 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'X-API-Key': GAS_API_KEY\r\n      }\r\n    }\r\n\r\n    if (data) {\r\n      options.body = JSON.stringify({\r\n        action,\r\n        data\r\n      })\r\n    } else {\r\n      url.searchParams.append('action', action)\r\n    }\r\n    \r\n    const response = await fetch(url.toString(), options)\r\n    const responseData = await response.json()\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(responseData.error || `HTTP error! status: ${response.status}`)\r\n    }\r\n    \r\n    return {\r\n      success: true,\r\n      data: responseData.data || responseData\r\n    }\r\n  } catch (error) {\r\n    console.error(`GAS Error (${action}):`, error)\r\n    return {\r\n      success: false,\r\n      error: error.message || 'Internal server error'\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = { fetchGas }", "const jwt = require('jsonwebtoken')\r\nconst cookie = require('cookie')\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET\r\nconst TOKEN_EXPIRY = '24h'\r\n\r\nfunction generateToken(payload) {\r\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: TOKEN_EXPIRY })\r\n}\r\n\r\nfunction verifyToken(token) {\r\n  try {\r\n    return jwt.verify(token, JWT_SECRET)\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\nfunction getTokenFromRequest(event) {\r\n  // Check Authorization header first\r\n  const authHeader = event.headers.authorization\r\n  if (authHeader?.startsWith('Bearer ')) {\r\n    return authHeader.substring(7)\r\n  }\r\n  \r\n  // Then check cookies\r\n  const cookies = cookie.parse(event.headers.cookie || '')\r\n  return cookies.token\r\n}\r\n\r\nfunction createAuthCookie(token) {\r\n  return cookie.serialize('token', token, {\r\n    httpOnly: true,\r\n    secure: true,\r\n    sameSite: 'strict',\r\n    path: '/',\r\n    maxAge: 86400 // 24 hours\r\n  })\r\n}\r\n\r\nmodule.exports = {\r\n  generateToken,\r\n  verifyToken,\r\n  getTokenFromRequest,\r\n  createAuthCookie\r\n}", "function createResponse(statusCode, data, options = {}) {\r\n  // Allow all origins in development mode\r\n  const isDev = process.env.NODE_ENV === 'development'\r\n  const allowedOrigins = isDev ? ['*'] : (process.env.ALLOWED_ORIGINS?.split(',') || [])\r\n  const origin = options.origin || '*'\r\n  \r\n  const headers = {\r\n    'Access-Control-Allow-Origin': isDev ? '*' : (allowedOrigins.includes(origin) ? origin : allowedOrigins[0]),\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n    'Access-Control-Allow-Credentials': 'true',\r\n    'Content-Type': 'application/json',\r\n    ...options.headers\r\n  }\r\n\r\n  return {\r\n    statusCode,\r\n    headers,\r\n    body: JSON.stringify(data)\r\n  }\r\n}\r\n\r\nmodule.exports = { createResponse }", "const { fetchGas } = require('./utils/gas')\r\nconst { verifyToken, getTokenFromRequest } = require('./utils/auth')\r\nconst { createResponse } = require('./utils/response')\r\n\r\n// Routes yang memerlukan authentication\r\nconst PROTECTED_ROUTES = ['checkin', 'delivery']\r\n\r\nexports.handler = async (event) => {\r\n  // Handle CORS preflight\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return createResponse(204)\r\n  }\r\n\r\n  try {\r\n    // Extract path dari URL, hapus '/api/' prefix jika ada\r\n    const path = event.path.replace(/^\\/api\\/|^\\/.netlify\\/functions\\/api\\/?/, '').split('/')[0]\r\n    const params = event.queryStringParameters || {}\r\n    const body = event.body ? JSON.parse(event.body) : null\r\n    const origin = event.headers.origin\r\n\r\n    console.log('Request path:', path) // Untuk debugging\r\n\r\n    // Check authentication untuk protected routes\r\n    if (PROTECTED_ROUTES.includes(path)) {\r\n      const token = getTokenFromRequest(event)\r\n      if (!token) {\r\n        return createResponse(401, { \r\n          success: false, \r\n          error: 'Authentication required' \r\n        }, { origin })\r\n      }\r\n\r\n      const decoded = verifyToken(token)\r\n      if (!decoded) {\r\n        return createResponse(401, { \r\n          success: false, \r\n          error: 'Invalid or expired token' \r\n        }, { origin })\r\n      }\r\n    }\r\n\r\n    let gasAction\r\n    let gasData = null\r\n\r\n    switch (path) {\r\n      case 'branches':\r\n        gasAction = 'getBranchConfig'\r\n        break\r\n      case 'vehicles':\r\n        gasAction = 'getVehicleData'\r\n        gasData = { branch: params.branch }\r\n        break\r\n      case 'invoices':\r\n        gasAction = 'getInvoiceList'\r\n        gasData = { \r\n          branch: params.branch,\r\n          date: params.date\r\n        }\r\n        break\r\n      case 'login':\r\n        gasAction = 'login'\r\n        gasData = body?.data\r\n        break\r\n      case 'register':\r\n        gasAction = 'register'\r\n        gasData = body?.data\r\n        break\r\n      case 'checkin':\r\n        gasAction = 'submitCheckIn'\r\n        gasData = body?.data\r\n        break\r\n      case 'delivery':\r\n        gasAction = 'submitForm'\r\n        gasData = body?.data\r\n        break\r\n      default:\r\n        console.log('Path not found:', path) // Untuk debugging\r\n        return createResponse(404, { \r\n          success: false, \r\n          error: 'Not found' \r\n        }, { origin })\r\n    }\r\n\r\n    const gasResponse = await fetchGas(gasAction, gasData)\r\n    \r\n    if (!gasResponse.success) {\r\n      return createResponse(500, gasResponse, { origin })\r\n    }\r\n    \r\n    return createResponse(200, gasResponse, { origin })\r\n  } catch (error) {\r\n    console.error('API Error:', error)\r\n    return createResponse(500, { \r\n      success: false, \r\n      error: error.message || 'Internal server error' \r\n    }, { origin })\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": ["exports", "module", "fetchGas", "exports", "module", "verifyToken", "getTokenFromRequest", "exports", "module", "createResponse", "origin", "origin"]
}
